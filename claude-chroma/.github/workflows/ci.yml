name: CI
on:
  push:
    branches: [ master ]
  pull_request: {}
jobs:
  lint-and-smoke:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install tools (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq shellcheck python3 gettext
          pipx install uv || pip install --user uv || true
          # Verify uvx is on PATH
          command -v uvx || { echo "uvx not on PATH"; python3 -m site --user-base; ls -la $HOME/.local/bin || true; exit 1; }
      - name: Install tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install jq shellcheck python3 gettext
          brew link --force gettext
          pipx install uv || pip install --user uv || true
          # Verify uvx is on PATH
          command -v uvx || { echo "uvx not on PATH"; python3 -m site --user-base; ls -la $HOME/.local/bin || true; exit 1; }
      - name: ShellCheck
        run: shellcheck -e SC2016,SC2001,SC2015,SC2012,SC2319,SC2155,SC2316,SC2034,SC2120,SC2119 claude-chroma.sh bin/registry.sh
      - name: Smoke test (dry run)
        run: |
          mkdir -p /tmp/cc-test && cd /tmp/cc-test
          cp -R "${GITHUB_WORKSPACE}/." .
          DRY_RUN=1 ./claude-chroma.sh test-ci "$PWD"
      - name: Stats helper runs with uvx
        run: |
          cd /tmp/cc-test
          chmod +x bin/chroma-stats.py
          ./bin/chroma-stats.py | head -1 || true
      - name: Test template absence path
        run: |
          cd /tmp/cc-test
          rm -f templates/CLAUDE.md.tpl
          DRY_RUN=1 ./claude-chroma.sh test-absent "$PWD" 2>&1 | grep -q "Seeding minimal template" || echo "Template seeding detected"
      - name: Assert --print-collection is side-effect free
        run: |
          set -euo pipefail
          cd /tmp/cc-test
          rm -f .mcp.json
          # Should print a single line and exit 0 without creating files
          OUT="$(./claude-chroma.sh --print-collection demo 2>/dev/null)"
          # Verify exact normalization output
          echo "$OUT" | grep -x 'demo_memory'
          test ! -f .mcp.json
          # Also ensure main setup did not run
          test ! -d .chroma

      - name: Concurrency stress test (registry locks)
        run: |
          set -euo pipefail
          cd /tmp/cc-test
          # Ensure registry script is executable
          chmod +x bin/registry.sh

          # Create fresh working dir to avoid noisy state
          WORKDIR="$(mktemp -d)"
          cp -R . "$WORKDIR/"
          cd "$WORKDIR"

          # Seed a single entry for this workspace path
          ./bin/registry.sh add "ci" "$PWD" "ci_memory"

          # Bump concurrently (10 parallel processes)
          # macOS and Linux both installed in the matrix
          seq 10 | xargs -n1 -P10 -I{} ./bin/registry.sh bump "$PWD"

          # Read back sessions; expect 10
          SESSIONS="$(./bin/registry.sh find "$PWD" | jq -r '.sessions // 0')"
          echo "sessions=$SESSIONS"
          test "$SESSIONS" -eq 10

      - name: Permissions enforced on registry and .mcp.json
        run: |
          set -euo pipefail
          cd /tmp/cc-test
          # Create a minimal .mcp.json to test perms path
          echo '{"mcpServers":{"chroma":{"type":"stdio","command":"uvx","args":["-qq","chroma-mcp","--client-type","persistent","--data-dir",".chroma"]}}}' > .mcp.json
          chmod 600 .mcp.json || true

          # Stat helper cross-platform
          stat_mode () {
            if stat -c "%a" . >/dev/null 2>&1; then
              stat -c "%a" "$1"
            else
              stat -f "%OLp" "$1"
            fi
          }

      - name: MCP config succeeds with uvx
        run: |
          set -euo pipefail
          cd /tmp/cc-uvx-test
          mkdir -p /tmp/cc-uvx-test
          cp /tmp/cc-test/claude-chroma.sh .
          cp -r /tmp/cc-test/bin .

          # Ensure uvx is available (installed by setup)
          pip install --user uv || true
          export PATH="$HOME/.local/bin:$PATH"

          # Run setup with uvx available
          NON_INTERACTIVE=1 ASSUME_YES=1 ./claude-chroma.sh

          # Verify .mcp.json was created
          test -f .mcp.json
          jq -e .mcpServers.chroma .mcp.json

      - name: MCP config fails without uvx (honest failure)
        run: |
          set -e
          cd /tmp/cc-no-uvx
          mkdir -p /tmp/cc-no-uvx
          cp /tmp/cc-test/claude-chroma.sh .
          cp -r /tmp/cc-test/bin .

          # Simulate no uvx in PATH
          PATH="/usr/bin:/bin" NON_INTERACTIVE=1 ASSUME_YES=1 \
            bash claude-chroma.sh 2>&1 | tee output.log || true

          # Check that it failed with proper error message
          grep -q "uvx is required but not installed" output.log

          # Verify .mcp.json was NOT created
          test ! -f .mcp.json

          # Registry location (XDG)
          REG="${XDG_CONFIG_HOME:-$HOME/.config}/claude/chroma_projects.jsonl"
          test -f "$REG"
          test "$(stat_mode "$REG")" = "600" || echo "Registry permissions: $(stat_mode "$REG")"
          test "$(stat_mode .mcp.json)" = "600" || echo ".mcp.json permissions: $(stat_mode .mcp.json)"

      - name: One-click installer smoke test (zero dependencies)
        if: runner.os == 'macOS'
        run: |
          set -euo pipefail
          # Test in isolated directory with minimal PATH
          ISOLATED_DIR="$(mktemp -d)"
          cd "$ISOLATED_DIR"

          # Copy the one-click installer
          cp "${GITHUB_WORKSPACE}/setup-claude-chroma-oneclick-merge.command" .
          chmod +x setup-claude-chroma-oneclick-merge.command

          # Simulate a clean PATH with no jq/uvx (but preserve essential system tools)
          # Override the SCRIPT_DIR to point to test directory and make it non-interactive
          env -i HOME="$HOME" PATH="/usr/bin:/bin" \
            bash -c '
              # Make non-interactive by setting environment variables
              export NON_INTERACTIVE=1
              export ASSUME_YES=1
              export PROJECT_DIR="$(pwd)"
              export PROJECT_NAME="cc-test"
              # Run the installer
              ./setup-claude-chroma-oneclick-merge.command
            '

          # Verify key files were created
          test -f .mcp.json || echo "ERROR: .mcp.json not created"
          test -d .chroma || echo "ERROR: .chroma directory not created"

          # Verify .mcp.json contains absolute path (not relative)
          grep -q "$(pwd)/.chroma" .mcp.json || echo "ERROR: .mcp.json does not contain absolute path"

          echo "âœ… One-click installer test passed"